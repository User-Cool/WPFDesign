<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CustomProgressBarTest">

    <!-- Converter -->
    <local:RadiusConverter x:Key="RadiusConverter"/>
    <local:BorderClipConverter x:Key="BorderClipConverter"/>


    <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF1E8CE8"/>
    <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFCCCCCC"/>
    <SolidColorBrush x:Key="ProgressBar.Border" Color="#FF333333"/>


    <!-- 样式3 -->
    <!-- 注意属性 Foreground 的设置。画笔的设置和画笔动画有直接关系，在下面的例子中，如果改变画笔，可能会崩溃 -->
    <!-- 技术点：画笔动画 -->
    <Style x:Key="ProgressBarStyle3" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground">
            <Setter.Value>
                <DrawingBrush Viewport="0,0,20,32" TileMode="Tile" ViewportUnits="Absolute" Stretch="None">
                    <DrawingBrush.Transform>
                        <TransformGroup>
                            <RotateTransform Angle="20"/>
                            <TranslateTransform x:Name="MyTransform" X="0"/>
                        </TransformGroup>
                    </DrawingBrush.Transform>
                    <DrawingBrush.Drawing>
                        <GeometryDrawing>
                            <GeometryDrawing.Brush>
                                <LinearGradientBrush EndPoint="1,0" StartPoint="0,0">
                                    <GradientStop Color="Red" Offset="0"/>
                                    <GradientStop Color="Red" Offset="0.5"/>
                                    <GradientStop Color="Black" Offset="0.5"/>
                                    <GradientStop Color="Black" Offset="1"/>
                                </LinearGradientBrush>
                            </GeometryDrawing.Brush>
                            <GeometryDrawing.Geometry>
                                <RectangleGeometry Rect="0,0,20,32"/>
                            </GeometryDrawing.Geometry>
                        </GeometryDrawing>
                    </DrawingBrush.Drawing>
                </DrawingBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Maximum" Value="100.0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <!-- 资源 -->
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="IsIndeterminate" RepeatBehavior="Forever">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                            </DoubleAnimationUsingKeyFrames>
                            <PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
                                <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                            </PointAnimationUsingKeyFrames>
                        </Storyboard>

                        <Storyboard x:Key="OnLoaded" >
                            <DoubleAnimationUsingKeyFrames RepeatBehavior="Forever" Storyboard.TargetProperty="(Rectangle.Fill).(Brush.Transform).(TransformGroup.Children)[1].(TranslateTransform.X)" Storyboard.TargetName="Indicator">
                                <LinearDoubleKeyFrame KeyTime="0" Value="0"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:.25" Value="21"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>

                    <!-- 框架，当边框用。
                         直接使用 Border，圆角不完美。因此为了解决这个问题，我们在圆角的时候不设置 Border 的边框，而是利用两个 Border
                         套在一起，底下的 Border 充当边框，Padding 作为边框的宽度，上面的 Border 作为内容区域，这时候唯一的难点在内部
                         的圆角上。需要注意的是，在没有边框的时候，将底部 Border 的背景色设置为透明。 -->
                    <!-- 1.1、 框架外部区域：边框、圆角 -->
                    <Border 
                        x:Name="TemplateRoot" 
                        Padding="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding BorderBrush}">

                        <!-- 状态。ProgressBar 具有两个状态：未知状态、正常状态 -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate" Storyboard="{StaticResource IsIndeterminate}"/>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <!-- 圆角 -->
                        <Border.CornerRadius>
                            <MultiBinding Converter="{StaticResource RadiusConverter}">
                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
                            </MultiBinding>
                        </Border.CornerRadius>

                        <!-- 裁剪需要为父对象设置裁剪区域，子对象的 ClipToBounds 才会生效？ClipToBounds 没有研究出来，这里使用 Clip -->
                        <!-- 总共多少 -->
                        <!-- 1.2、框架内部区域：背景色、圆角 -->
                        <Border x:Name="PART_Track" Background="{TemplateBinding Background}">
                            <!-- 内部区域圆角 -->
                            <Border.CornerRadius>
                                <MultiBinding Converter="{StaticResource RadiusConverter}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
                                </MultiBinding>
                            </Border.CornerRadius>
                            <!-- 内容裁剪 -->
                            <Border.Clip>
                                <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
                                    <Binding Path="CornerRadius" RelativeSource="{RelativeSource Mode=Self}"/>
                                </MultiBinding>
                            </Border.Clip>

                            <!-- 内容 -->
                            <Grid>
                                <!-- Determinate 状态 -->
                                <!-- 进行了多少 -->
                                <Border 
                                    x:Name="PART_Indicator"
                                    HorizontalAlignment="Left"
                                    CornerRadius="{Binding Path=CornerRadius, ElementName=PART_Track}">
                                    <!-- 内容裁剪 -->
                                    <Border.Clip>
                                        <MultiBinding Converter="{StaticResource BorderClipConverter}">
                                            <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
                                            <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
                                            <Binding Path="CornerRadius" RelativeSource="{RelativeSource Mode=Self}"/>
                                        </MultiBinding>
                                    </Border.Clip>
                                    <Grid>
                                        <!-- 指示器，执行了多少的背景色 -->
                                        <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}">
                                            <!-- 圆角支持 -->
                                            <Rectangle.RadiusX>
                                                <MultiBinding Converter="{StaticResource RadiusConverter}">
                                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
                                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
                                                </MultiBinding>
                                            </Rectangle.RadiusX>
                                            <Rectangle.RadiusY>
                                                <MultiBinding Converter="{StaticResource RadiusConverter}">
                                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=Self}"/>
                                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Mode=Self}"/>
                                                </MultiBinding>
                                            </Rectangle.RadiusY>
                                        </Rectangle>
                                    </Grid>
                                </Border>

                                <!-- Indeterminate 状态 -->
                                <Rectangle
                                        x:Name="Animation" 
                                        Fill="{TemplateBinding Foreground}"
                                        Visibility="Collapsed"
                                        RenderTransformOrigin="0.5,0.5">
                                    <!-- 和垂直方向上的 Indeterminate 状态的动画有关。如果设置为垂直状态，并且设置为 Indeterminate 状态，必须要有这里 -->
                                    <Rectangle.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Rectangle.RenderTransform>
                                </Rectangle>
                            </Grid>
                        </Border>
                    </Border>

                    <!-- Trigger -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="PART_Indicator" Value="Collapsed"/>
                            <Setter Property="Visibility" TargetName="Animation" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="False">
                            <Setter Property="Visibility" TargetName="PART_Indicator" Value="Visible"/>
                            <Setter Property="Visibility" TargetName="Animation" Value="Collapsed"/>
                        </Trigger>
                        <!-- 因为利用 Border 的背景色作为边框颜色，利用 Padding 作为边框，需要在 BorderThickness 为 0 的时候，设置背景色为透明，否则在圆角的时候，会有背景色透过来 -->
                        <Trigger Property="BorderThickness" Value="0">
                            <Setter TargetName="TemplateRoot" Property="Background" Value="Transparent"/>
                        </Trigger>

                        <EventTrigger RoutedEvent="FrameworkElement.Loaded" SourceName="Indicator">
                            <BeginStoryboard Storyboard="{StaticResource OnLoaded}"/>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>